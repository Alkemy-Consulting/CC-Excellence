# GitHub Actions Workflow for CC-Excellence
# Enterprise CI/CD pipeline with comprehensive testing

name: CC-Excellence Enterprise Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'modules/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'pytest.ini'
  pull_request:
    branches: [ main ]
    paths:
      - 'modules/**'
      - 'tests/**'
      - 'requirements.txt' 
      - 'pytest.ini'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'
  COVERAGE_THRESHOLD: 80

jobs:
  test-matrix:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [
          { name: "Unit Tests", marker: "unit", coverage: true },
          { name: "Integration Tests", marker: "integration", coverage: true },
          { name: "Prophet Core", marker: "prophet_core", coverage: false },
          { name: "Prophet Presentation", marker: "prophet_presentation", coverage: false },
          { name: "Performance Tests", marker: "performance", coverage: false }
        ]
      fail-fast: false

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt

    - name: Verify Installation
      run: |
        python --version
        pip list
        python -c "import prophet, pandas, numpy, plotly; print('All dependencies available')"

    - name: Run ${{ matrix.test-suite.name }}
      run: |
        if [ "${{ matrix.test-suite.coverage }}" = "true" ]; then
          pytest -m "${{ matrix.test-suite.marker }}" \
            --cov=modules \
            --cov-report=xml:coverage-${{ matrix.test-suite.marker }}.xml \
            --cov-report=html:htmlcov-${{ matrix.test-suite.marker }} \
            --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} \
            --html=test-report-${{ matrix.test-suite.marker }}.html \
            --self-contained-html \
            -v
        else
          pytest -m "${{ matrix.test-suite.marker }}" \
            --html=test-report-${{ matrix.test-suite.marker }}.html \
            --self-contained-html \
            -v
        fi

    - name: Upload Coverage Reports
      if: matrix.test-suite.coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage-${{ matrix.test-suite.marker }}.xml
        flags: ${{ matrix.test-suite.marker }}
        name: ${{ matrix.test-suite.name }}

    - name: Upload Test Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.test-suite.marker }}
        path: |
          test-report-${{ matrix.test-suite.marker }}.html
          htmlcov-${{ matrix.test-suite.marker }}/
          coverage-${{ matrix.test-suite.marker }}.xml
        retention-days: 30

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt

    - name: Run Black (Code Formatting)
      run: black --check --diff modules/ tests/

    - name: Run isort (Import Sorting)
      run: isort --check --diff modules/ tests/

    - name: Run Flake8 (Linting)
      run: flake8 modules/ tests/

    - name: Run MyPy (Type Checking)
      run: mypy modules/ || true  # Optional for now

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Bandit Security Scan
      uses: tj-actions/bandit@v5.1
      with:
        options: "-r modules/ -f json -o bandit-report.json"

    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  integration-smoke:
    name: Integration Smoke Test
    runs-on: ubuntu-latest
    needs: [test-matrix]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt

    - name: Run Smoke Tests
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from modules.prophet_core import ProphetForecaster
        from modules.prophet_presentation import ProphetPlotFactory
        import pandas as pd
        import numpy as np
        
        # Smoke test: Create sample data and run forecast
        df = pd.DataFrame({
            'date': pd.date_range('2020-01-01', periods=100),
            'value': np.random.normal(100, 20, 100)
        })
        
        forecaster = ProphetForecaster()
        model_config = {'seasonality_mode': 'additive', 'add_holidays': False}
        base_config = {'forecast_periods': 30, 'confidence_interval': 0.8}
        
        result = forecaster.run_forecast_core(df, 'date', 'value', model_config, base_config)
        assert result.success, f'Forecast failed: {result.error}'
        
        # Test visualization
        plot_generator = ProphetPlotFactory.create_plot_generator()
        assert plot_generator is not None
        
        print('✅ Enterprise architecture smoke test passed!')
        "

    - name: Test Module Imports
      run: |
        python -c "
        from modules.prophet_module import run_prophet_forecast
        from modules.prophet_core import ProphetForecaster, ProphetForecastResult
        from modules.prophet_presentation import ProphetPlotGenerator
        print('✅ All module imports successful!')
        "

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [test-matrix, code-quality, integration-smoke]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Generate Documentation
      run: |
        echo "# CC-Excellence Test Results" > test-summary.md
        echo "## Latest Test Run: $(date)" >> test-summary.md
        echo "✅ All enterprise tests passed successfully!" >> test-summary.md

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: success()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        publish_branch: gh-pages

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-matrix, code-quality, security-scan, integration-smoke]
    if: always()
    steps:
    - name: Determine Overall Status
      id: status
      run: |
        if [ "${{ needs.test-matrix.result }}" = "success" ] && \
           [ "${{ needs.code-quality.result }}" = "success" ] && \
           [ "${{ needs.integration-smoke.result }}" = "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=🎉 All CC-Excellence enterprise tests passed!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Some CC-Excellence tests failed" >> $GITHUB_OUTPUT
        fi

    - name: Create Summary
      run: |
        echo "## 🚀 CC-Excellence Enterprise Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Test Matrix | ${{ needs.test-matrix.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Smoke | ${{ needs.integration-smoke.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Result:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
